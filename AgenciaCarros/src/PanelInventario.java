//Autores:
//Carlos Ernesto Lopez Solano A01633683
//Juan Daniel Rubio Camacho A01633924
//Nombre de la clase: PanelInventario.java
//Fecha: 05/05/2019
//Comentarios u observaciones.
//------------------------------------------------------------------------------

import java.awt.Font;
import java.io.File;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class PanelInventario extends javax.swing.JPanel {

    private Inventario inventario;

    public PanelInventario() {
        initComponents();
        this.inventario = DataLoader.loadInventory(new File("CarDatabase.bin"));
        this.llenarTabla(this.inventario.listaCarros());
        tablaInventario.setRowHeight(30);
        tablaInventario.getTableHeader().setFont(new Font("SansSerif", Font.BOLD, 24));
    }
    
    //Llena la tabla con los datos del inventario que se le pasa
    private void llenarTabla(Carro[] carros) {
        DefaultTableModel modelo = (DefaultTableModel) tablaInventario.getModel();
        
        //Variable para formatear Precio
        NumberFormat format = NumberFormat.getCurrencyInstance(Locale.US);

        for(Carro vehiculo : carros) {
                modelo.addRow(new Object[]{vehiculo.getModelo(), vehiculo.getMarca(), vehiculo.getYear(), vehiculo.getColor(), vehiculo.getSize(), format.format(vehiculo.getPrecio())});
        }
        
        if(carros.length < 27) {
            for(int i = 0; i < 27 - carros.length; i++) {
                modelo.addRow(new Object[6]);
            }
        }
    }
    

    private void reacomodarTabla() {
        
    }
    
    //Busca el modelo especificado en el inventario actual
    //Si lo encuentra, devuelve una lista de carros lista para ser procesada
    //Sino lo encuentra, o el modelo esta vacio/es nulo, devuelve la lista
    //de carros del inventario actual
    private Carro[] buscarEnTabla(String modelo) {
        //Corroborar que no sea un texto vacio o nulo
        if(modelo != "" && modelo != null) {
            if(this.inventario.containsModelo(modelo)) {
                return this.inventario.listaCarrosPorModelo(modelo);
            }
            JOptionPane.showMessageDialog(this, "No se cuenta con el modelo especificado actualmente");
            return this.inventario.listaCarros();
        }
        //Si no se ingresa texto y se presiona el boton
        //Se realiza el llenado normal de la tabla
        return this.inventario.listaCarros();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tablaInventario = new javax.swing.JTable();
        inventarioL = new javax.swing.JLabel();
        buscarTF = new javax.swing.JTextField();
        buscarB = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1231, 1000));
        setMinimumSize(new java.awt.Dimension(1231, 1000));
        setPreferredSize(new java.awt.Dimension(1231, 1000));

        tablaInventario.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tablaInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Modelo", "Marca", "Año", "Color", "Tamaño", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaInventario);

        inventarioL.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        inventarioL.setText("Inventario");

        buscarTF.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        buscarB.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        buscarB.setText("Buscar");
        buscarB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1231, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(inventarioL, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buscarB, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buscarTF, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(inventarioL, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buscarB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buscarTF))))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 887, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buscarBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBActionPerformed
        ((DefaultTableModel)tablaInventario.getModel()).setRowCount(0);
        this.llenarTabla(this.buscarEnTabla(buscarTF.getText()));
    }//GEN-LAST:event_buscarBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscarB;
    private javax.swing.JTextField buscarTF;
    private javax.swing.JLabel inventarioL;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tablaInventario;
    // End of variables declaration//GEN-END:variables
}
